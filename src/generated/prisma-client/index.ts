// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";
export interface Viewer {

}
export interface AuthPayload {
  token: string | null
  user: User | null
}
export interface MutationResult {
  success: boolean | null
}

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cart: (where?: CartWhereInput) => Promise<boolean>;
  invoice: (where?: InvoiceWhereInput) => Promise<boolean>;
  paymentRecord: (where?: PaymentRecordWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cart: (where: CartWhereUniqueInput) => CartPromise;
  carts: (
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cart>;
  cartsConnection: (
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CartConnectionPromise;
  invoice: (where: InvoiceWhereUniqueInput) => InvoicePromise;
  invoices: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Invoice>;
  invoicesConnection: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InvoiceConnectionPromise;
  paymentRecord: (where: PaymentRecordWhereUniqueInput) => PaymentRecordPromise;
  paymentRecords: (
    args?: {
      where?: PaymentRecordWhereInput;
      orderBy?: PaymentRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PaymentRecord>;
  paymentRecordsConnection: (
    args?: {
      where?: PaymentRecordWhereInput;
      orderBy?: PaymentRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PaymentRecordConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (
    args: { data: CartUpdateInput; where: CartWhereUniqueInput }
  ) => CartPromise;
  updateManyCarts: (
    args: { data: CartUpdateManyMutationInput; where?: CartWhereInput }
  ) => BatchPayloadPromise;
  upsertCart: (
    args: {
      where: CartWhereUniqueInput;
      create: CartCreateInput;
      update: CartUpdateInput;
    }
  ) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createInvoice: (data: InvoiceCreateInput) => InvoicePromise;
  updateInvoice: (
    args: { data: InvoiceUpdateInput; where: InvoiceWhereUniqueInput }
  ) => InvoicePromise;
  updateManyInvoices: (
    args: { data: InvoiceUpdateManyMutationInput; where?: InvoiceWhereInput }
  ) => BatchPayloadPromise;
  upsertInvoice: (
    args: {
      where: InvoiceWhereUniqueInput;
      create: InvoiceCreateInput;
      update: InvoiceUpdateInput;
    }
  ) => InvoicePromise;
  deleteInvoice: (where: InvoiceWhereUniqueInput) => InvoicePromise;
  deleteManyInvoices: (where?: InvoiceWhereInput) => BatchPayloadPromise;
  createPaymentRecord: (data: PaymentRecordCreateInput) => PaymentRecordPromise;
  updatePaymentRecord: (
    args: {
      data: PaymentRecordUpdateInput;
      where: PaymentRecordWhereUniqueInput;
    }
  ) => PaymentRecordPromise;
  updateManyPaymentRecords: (
    args: {
      data: PaymentRecordUpdateManyMutationInput;
      where?: PaymentRecordWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPaymentRecord: (
    args: {
      where: PaymentRecordWhereUniqueInput;
      create: PaymentRecordCreateInput;
      update: PaymentRecordUpdateInput;
    }
  ) => PaymentRecordPromise;
  deletePaymentRecord: (
    where: PaymentRecordWhereUniqueInput
  ) => PaymentRecordPromise;
  deleteManyPaymentRecords: (
    where?: PaymentRecordWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  invoice: (
    where?: InvoiceSubscriptionWhereInput
  ) => InvoiceSubscriptionPayloadSubscription;
  paymentRecord: (
    where?: PaymentRecordSubscriptionWhereInput
  ) => PaymentRecordSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type InvoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "email_ASC"
  | "email_DESC"
  | "record_ASC"
  | "record_DESC"
  | "created_ASC"
  | "created_DESC"
  | "stripePaymentId_ASC"
  | "stripePaymentId_DESC"
  | "stripeCustomerId_ASC"
  | "stripeCustomerId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "description_ASC"
  | "description_DESC"
  | "varietal_ASC"
  | "varietal_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "itemCount_ASC"
  | "itemCount_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PaymentRecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "balanceTransaction_ASC"
  | "balanceTransaction_DESC"
  | "created_ASC"
  | "created_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "stripeCustomerId_ASC"
  | "stripeCustomerId_DESC"
  | "stripePaymentId_ASC"
  | "stripePaymentId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "data_ASC"
  | "data_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateCreated_ASC"
  | "dateCreated_DESC"
  | "role_ASC"
  | "role_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "bizName_ASC"
  | "bizName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "stripeId_ASC"
  | "stripeId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CartUpdateOneWithoutUserInput {
  create?: CartCreateWithoutUserInput;
  update?: CartUpdateWithoutUserDataInput;
  upsert?: CartUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CartWhereUniqueInput;
}

export type CartWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductUpdateWithoutCartsDataInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
  purchases?: InvoiceUpdateManyWithoutItemsInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  price?: String;
  price_not?: String;
  price_in?: String[] | String;
  price_not_in?: String[] | String;
  price_lt?: String;
  price_lte?: String;
  price_gt?: String;
  price_gte?: String;
  price_contains?: String;
  price_not_contains?: String;
  price_starts_with?: String;
  price_not_starts_with?: String;
  price_ends_with?: String;
  price_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  varietal?: String;
  varietal_not?: String;
  varietal_in?: String[] | String;
  varietal_not_in?: String[] | String;
  varietal_lt?: String;
  varietal_lte?: String;
  varietal_gt?: String;
  varietal_gte?: String;
  varietal_contains?: String;
  varietal_not_contains?: String;
  varietal_starts_with?: String;
  varietal_not_starts_with?: String;
  varietal_ends_with?: String;
  varietal_not_ends_with?: String;
  vendor?: UserWhereInput;
  carts_every?: CartWhereInput;
  carts_some?: CartWhereInput;
  carts_none?: CartWhereInput;
  purchases_every?: InvoiceWhereInput;
  purchases_some?: InvoiceWhereInput;
  purchases_none?: InvoiceWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface InvoiceUpdateManyWithoutItemsInput {
  create?: InvoiceCreateWithoutItemsInput[] | InvoiceCreateWithoutItemsInput;
  delete?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  disconnect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  update?:
    | InvoiceUpdateWithWhereUniqueWithoutItemsInput[]
    | InvoiceUpdateWithWhereUniqueWithoutItemsInput;
  upsert?:
    | InvoiceUpsertWithWhereUniqueWithoutItemsInput[]
    | InvoiceUpsertWithWhereUniqueWithoutItemsInput;
  deleteMany?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
  updateMany?:
    | InvoiceUpdateManyWithWhereNestedInput[]
    | InvoiceUpdateManyWithWhereNestedInput;
}

export interface CartWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  itemCount?: Int;
  itemCount_not?: Int;
  itemCount_in?: Int[] | Int;
  itemCount_not_in?: Int[] | Int;
  itemCount_lt?: Int;
  itemCount_lte?: Int;
  itemCount_gt?: Int;
  itemCount_gte?: Int;
  totalPrice?: String;
  totalPrice_not?: String;
  totalPrice_in?: String[] | String;
  totalPrice_not_in?: String[] | String;
  totalPrice_lt?: String;
  totalPrice_lte?: String;
  totalPrice_gt?: String;
  totalPrice_gte?: String;
  totalPrice_contains?: String;
  totalPrice_not_contains?: String;
  totalPrice_starts_with?: String;
  totalPrice_not_starts_with?: String;
  totalPrice_ends_with?: String;
  totalPrice_not_ends_with?: String;
  user?: UserWhereInput;
  items_every?: ProductWhereInput;
  items_some?: ProductWhereInput;
  items_none?: ProductWhereInput;
  AND?: CartWhereInput[] | CartWhereInput;
  OR?: CartWhereInput[] | CartWhereInput;
  NOT?: CartWhereInput[] | CartWhereInput;
}

export interface InvoiceUpdateWithWhereUniqueWithoutItemsInput {
  where: InvoiceWhereUniqueInput;
  data: InvoiceUpdateWithoutItemsDataInput;
}

export interface InvoiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  items_every?: ProductWhereInput;
  items_some?: ProductWhereInput;
  items_none?: ProductWhereInput;
  amount?: String;
  amount_not?: String;
  amount_in?: String[] | String;
  amount_not_in?: String[] | String;
  amount_lt?: String;
  amount_lte?: String;
  amount_gt?: String;
  amount_gte?: String;
  amount_contains?: String;
  amount_not_contains?: String;
  amount_starts_with?: String;
  amount_not_starts_with?: String;
  amount_ends_with?: String;
  amount_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  stripeRecord_every?: PaymentRecordWhereInput;
  stripeRecord_some?: PaymentRecordWhereInput;
  stripeRecord_none?: PaymentRecordWhereInput;
  created?: Int;
  created_not?: Int;
  created_in?: Int[] | Int;
  created_not_in?: Int[] | Int;
  created_lt?: Int;
  created_lte?: Int;
  created_gt?: Int;
  created_gte?: Int;
  stripePaymentId?: String;
  stripePaymentId_not?: String;
  stripePaymentId_in?: String[] | String;
  stripePaymentId_not_in?: String[] | String;
  stripePaymentId_lt?: String;
  stripePaymentId_lte?: String;
  stripePaymentId_gt?: String;
  stripePaymentId_gte?: String;
  stripePaymentId_contains?: String;
  stripePaymentId_not_contains?: String;
  stripePaymentId_starts_with?: String;
  stripePaymentId_not_starts_with?: String;
  stripePaymentId_ends_with?: String;
  stripePaymentId_not_ends_with?: String;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  customer?: UserWhereInput;
  vendors_every?: UserWhereInput;
  vendors_some?: UserWhereInput;
  vendors_none?: UserWhereInput;
  AND?: InvoiceWhereInput[] | InvoiceWhereInput;
  OR?: InvoiceWhereInput[] | InvoiceWhereInput;
  NOT?: InvoiceWhereInput[] | InvoiceWhereInput;
}

export interface CartUpdateInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  user?: UserUpdateOneRequiredWithoutCartInput;
  items?: ProductUpdateManyWithoutCartsInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  update?: UserUpdateWithoutCartDataInput;
  upsert?: UserUpsertWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export interface InvoiceUpdateWithoutItemsDataInput {
  dateCreated?: DateTimeInput;
  amount?: String;
  email?: String;
  record?: Json;
  stripeRecord?: PaymentRecordUpdateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserUpdateOneWithoutPurchasesInput;
  vendors?: UserUpdateManyWithoutSalesInput;
}

export interface UserUpdateWithoutCartDataInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  products?: ProductUpdateManyWithoutVendorInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface UserUpdatepermissionsInput {
  set?: String[] | String;
}

export interface InvoiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InvoiceWhereInput;
  AND?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  OR?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  NOT?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
}

export interface InvoiceUpdateManyWithoutCustomerInput {
  create?:
    | InvoiceCreateWithoutCustomerInput[]
    | InvoiceCreateWithoutCustomerInput;
  delete?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  disconnect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  update?:
    | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    | InvoiceUpdateWithWhereUniqueWithoutCustomerInput;
  upsert?:
    | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    | InvoiceUpsertWithWhereUniqueWithoutCustomerInput;
  deleteMany?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
  updateMany?:
    | InvoiceUpdateManyWithWhereNestedInput[]
    | InvoiceUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyMutationInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
}

export interface InvoiceUpdateWithWhereUniqueWithoutCustomerInput {
  where: InvoiceWhereUniqueInput;
  data: InvoiceUpdateWithoutCustomerDataInput;
}

export interface UserCreateInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  products?: ProductCreateManyWithoutVendorInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface InvoiceUpdateWithoutCustomerDataInput {
  dateCreated?: DateTimeInput;
  items?: ProductUpdateManyWithoutPurchasesInput;
  amount?: String;
  email?: String;
  record?: Json;
  stripeRecord?: PaymentRecordUpdateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  vendors?: UserUpdateManyWithoutSalesInput;
}

export interface ProductUpdateInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
  carts?: CartUpdateManyWithoutItemsInput;
  purchases?: InvoiceUpdateManyWithoutItemsInput;
}

export interface ProductUpdateManyWithoutPurchasesInput {
  create?:
    | ProductCreateWithoutPurchasesInput[]
    | ProductCreateWithoutPurchasesInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutPurchasesInput[]
    | ProductUpdateWithWhereUniqueWithoutPurchasesInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutPurchasesInput[]
    | ProductUpsertWithWhereUniqueWithoutPurchasesInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface ProductCreateInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserCreateOneWithoutProductsInput;
  carts?: CartCreateManyWithoutItemsInput;
  purchases?: InvoiceCreateManyWithoutItemsInput;
}

export interface ProductUpdateWithWhereUniqueWithoutPurchasesInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutPurchasesDataInput;
}

export interface PaymentRecordUpdateInput {
  dateCreated?: DateTimeInput;
  amount?: Int;
  balanceTransaction?: String;
  created?: Int;
  currency?: String;
  stripeCustomerId?: String;
  stripePaymentId?: String;
  status?: String;
  data?: Json;
}

export interface ProductUpdateWithoutPurchasesDataInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
  carts?: CartUpdateManyWithoutItemsInput;
}

export interface InvoiceUpdateManyMutationInput {
  dateCreated?: DateTimeInput;
  amount?: String;
  email?: String;
  record?: Json;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
}

export interface UserUpdateOneWithoutProductsInput {
  create?: UserCreateWithoutProductsInput;
  update?: UserUpdateWithoutProductsDataInput;
  upsert?: UserUpsertWithoutProductsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface InvoiceCreateInput {
  dateCreated?: DateTimeInput;
  items?: ProductCreateManyWithoutPurchasesInput;
  amount?: String;
  email: String;
  record?: Json;
  stripeRecord?: PaymentRecordCreateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserCreateOneWithoutPurchasesInput;
  vendors?: UserCreateManyWithoutSalesInput;
}

export interface UserUpdateWithoutProductsDataInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface CartUpdateManyMutationInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
}

export interface ProductUpsertWithWhereUniqueWithoutCartsInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCartsDataInput;
  create: ProductCreateWithoutCartsInput;
}

export interface InvoiceUpsertWithWhereUniqueWithoutCustomerInput {
  where: InvoiceWhereUniqueInput;
  update: InvoiceUpdateWithoutCustomerDataInput;
  create: InvoiceCreateWithoutCustomerInput;
}

export interface CartUpdateWithoutUserDataInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  items?: ProductUpdateManyWithoutCartsInput;
}

export interface ProductUpsertWithWhereUniqueWithoutPurchasesInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutPurchasesDataInput;
  create: ProductCreateWithoutPurchasesInput;
}

export interface ProductUpdateManyWithoutCartsInput {
  create?: ProductCreateWithoutCartsInput[] | ProductCreateWithoutCartsInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutCartsInput[]
    | ProductUpdateWithWhereUniqueWithoutCartsInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutCartsInput[]
    | ProductUpsertWithWhereUniqueWithoutCartsInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface CartUpsertWithoutUserInput {
  update: CartUpdateWithoutUserDataInput;
  create: CartCreateWithoutUserInput;
}

export interface ProductUpdateWithWhereUniqueWithoutCartsInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCartsDataInput;
}

export interface CartCreateInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  user: UserCreateOneWithoutCartInput;
  items?: ProductCreateManyWithoutCartsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  bizName?: String;
  bizName_not?: String;
  bizName_in?: String[] | String;
  bizName_not_in?: String[] | String;
  bizName_lt?: String;
  bizName_lte?: String;
  bizName_gt?: String;
  bizName_gte?: String;
  bizName_contains?: String;
  bizName_not_contains?: String;
  bizName_starts_with?: String;
  bizName_not_starts_with?: String;
  bizName_ends_with?: String;
  bizName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  cart?: CartWhereInput;
  stripeId?: String;
  stripeId_not?: String;
  stripeId_in?: String[] | String;
  stripeId_not_in?: String[] | String;
  stripeId_lt?: String;
  stripeId_lte?: String;
  stripeId_gt?: String;
  stripeId_gte?: String;
  stripeId_contains?: String;
  stripeId_not_contains?: String;
  stripeId_starts_with?: String;
  stripeId_not_starts_with?: String;
  stripeId_ends_with?: String;
  stripeId_not_ends_with?: String;
  purchases_every?: InvoiceWhereInput;
  purchases_some?: InvoiceWhereInput;
  purchases_none?: InvoiceWhereInput;
  products_every?: ProductWhereInput;
  products_some?: ProductWhereInput;
  products_none?: ProductWhereInput;
  sales_every?: InvoiceWhereInput;
  sales_some?: InvoiceWhereInput;
  sales_none?: InvoiceWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateWithoutCartInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  products?: ProductCreateManyWithoutVendorInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface PaymentRecordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  balanceTransaction?: String;
  balanceTransaction_not?: String;
  balanceTransaction_in?: String[] | String;
  balanceTransaction_not_in?: String[] | String;
  balanceTransaction_lt?: String;
  balanceTransaction_lte?: String;
  balanceTransaction_gt?: String;
  balanceTransaction_gte?: String;
  balanceTransaction_contains?: String;
  balanceTransaction_not_contains?: String;
  balanceTransaction_starts_with?: String;
  balanceTransaction_not_starts_with?: String;
  balanceTransaction_ends_with?: String;
  balanceTransaction_not_ends_with?: String;
  created?: Int;
  created_not?: Int;
  created_in?: Int[] | Int;
  created_not_in?: Int[] | Int;
  created_lt?: Int;
  created_lte?: Int;
  created_gt?: Int;
  created_gte?: Int;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  stripePaymentId?: String;
  stripePaymentId_not?: String;
  stripePaymentId_in?: String[] | String;
  stripePaymentId_not_in?: String[] | String;
  stripePaymentId_lt?: String;
  stripePaymentId_lte?: String;
  stripePaymentId_gt?: String;
  stripePaymentId_gte?: String;
  stripePaymentId_contains?: String;
  stripePaymentId_not_contains?: String;
  stripePaymentId_starts_with?: String;
  stripePaymentId_not_starts_with?: String;
  stripePaymentId_ends_with?: String;
  stripePaymentId_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: PaymentRecordWhereInput[] | PaymentRecordWhereInput;
  OR?: PaymentRecordWhereInput[] | PaymentRecordWhereInput;
  NOT?: PaymentRecordWhereInput[] | PaymentRecordWhereInput;
}

export interface InvoiceCreateManyWithoutCustomerInput {
  create?:
    | InvoiceCreateWithoutCustomerInput[]
    | InvoiceCreateWithoutCustomerInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
}

export interface InvoiceUpsertWithWhereUniqueWithoutItemsInput {
  where: InvoiceWhereUniqueInput;
  update: InvoiceUpdateWithoutItemsDataInput;
  create: InvoiceCreateWithoutItemsInput;
}

export interface ProductCreateManyWithoutPurchasesInput {
  create?:
    | ProductCreateWithoutPurchasesInput[]
    | ProductCreateWithoutPurchasesInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface UserUpdateManyDataInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
}

export interface UserCreateOneWithoutProductsInput {
  create?: UserCreateWithoutProductsInput;
  connect?: UserWhereUniqueInput;
}

export interface PaymentRecordUpdateManyInput {
  create?: PaymentRecordCreateInput[] | PaymentRecordCreateInput;
  update?:
    | PaymentRecordUpdateWithWhereUniqueNestedInput[]
    | PaymentRecordUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PaymentRecordUpsertWithWhereUniqueNestedInput[]
    | PaymentRecordUpsertWithWhereUniqueNestedInput;
  delete?: PaymentRecordWhereUniqueInput[] | PaymentRecordWhereUniqueInput;
  connect?: PaymentRecordWhereUniqueInput[] | PaymentRecordWhereUniqueInput;
  disconnect?: PaymentRecordWhereUniqueInput[] | PaymentRecordWhereUniqueInput;
  deleteMany?: PaymentRecordScalarWhereInput[] | PaymentRecordScalarWhereInput;
  updateMany?:
    | PaymentRecordUpdateManyWithWhereNestedInput[]
    | PaymentRecordUpdateManyWithWhereNestedInput;
}

export interface CartCreateOneWithoutUserInput {
  create?: CartCreateWithoutUserInput;
  connect?: CartWhereUniqueInput;
}

export interface PaymentRecordUpdateWithWhereUniqueNestedInput {
  where: PaymentRecordWhereUniqueInput;
  data: PaymentRecordUpdateDataInput;
}

export interface ProductCreateManyWithoutCartsInput {
  create?: ProductCreateWithoutCartsInput[] | ProductCreateWithoutCartsInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface PaymentRecordUpdateDataInput {
  dateCreated?: DateTimeInput;
  amount?: Int;
  balanceTransaction?: String;
  created?: Int;
  currency?: String;
  stripeCustomerId?: String;
  stripePaymentId?: String;
  status?: String;
  data?: Json;
}

export interface InvoiceCreateManyWithoutItemsInput {
  create?: InvoiceCreateWithoutItemsInput[] | InvoiceCreateWithoutItemsInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
}

export interface PaymentRecordUpsertWithWhereUniqueNestedInput {
  where: PaymentRecordWhereUniqueInput;
  update: PaymentRecordUpdateDataInput;
  create: PaymentRecordCreateInput;
}

export interface PaymentRecordCreateManyInput {
  create?: PaymentRecordCreateInput[] | PaymentRecordCreateInput;
  connect?: PaymentRecordWhereUniqueInput[] | PaymentRecordWhereUniqueInput;
}

export interface PaymentRecordScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  balanceTransaction?: String;
  balanceTransaction_not?: String;
  balanceTransaction_in?: String[] | String;
  balanceTransaction_not_in?: String[] | String;
  balanceTransaction_lt?: String;
  balanceTransaction_lte?: String;
  balanceTransaction_gt?: String;
  balanceTransaction_gte?: String;
  balanceTransaction_contains?: String;
  balanceTransaction_not_contains?: String;
  balanceTransaction_starts_with?: String;
  balanceTransaction_not_starts_with?: String;
  balanceTransaction_ends_with?: String;
  balanceTransaction_not_ends_with?: String;
  created?: Int;
  created_not?: Int;
  created_in?: Int[] | Int;
  created_not_in?: Int[] | Int;
  created_lt?: Int;
  created_lte?: Int;
  created_gt?: Int;
  created_gte?: Int;
  currency?: String;
  currency_not?: String;
  currency_in?: String[] | String;
  currency_not_in?: String[] | String;
  currency_lt?: String;
  currency_lte?: String;
  currency_gt?: String;
  currency_gte?: String;
  currency_contains?: String;
  currency_not_contains?: String;
  currency_starts_with?: String;
  currency_not_starts_with?: String;
  currency_ends_with?: String;
  currency_not_ends_with?: String;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  stripePaymentId?: String;
  stripePaymentId_not?: String;
  stripePaymentId_in?: String[] | String;
  stripePaymentId_not_in?: String[] | String;
  stripePaymentId_lt?: String;
  stripePaymentId_lte?: String;
  stripePaymentId_gt?: String;
  stripePaymentId_gte?: String;
  stripePaymentId_contains?: String;
  stripePaymentId_not_contains?: String;
  stripePaymentId_starts_with?: String;
  stripePaymentId_not_starts_with?: String;
  stripePaymentId_ends_with?: String;
  stripePaymentId_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: PaymentRecordScalarWhereInput[] | PaymentRecordScalarWhereInput;
  OR?: PaymentRecordScalarWhereInput[] | PaymentRecordScalarWhereInput;
  NOT?: PaymentRecordScalarWhereInput[] | PaymentRecordScalarWhereInput;
}

export interface UserCreateOneWithoutPurchasesInput {
  create?: UserCreateWithoutPurchasesInput;
  connect?: UserWhereUniqueInput;
}

export interface PaymentRecordUpdateManyWithWhereNestedInput {
  where: PaymentRecordScalarWhereInput;
  data: PaymentRecordUpdateManyDataInput;
}

export interface ProductCreateManyWithoutVendorInput {
  create?: ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface PaymentRecordUpdateManyDataInput {
  dateCreated?: DateTimeInput;
  amount?: Int;
  balanceTransaction?: String;
  created?: Int;
  currency?: String;
  stripeCustomerId?: String;
  stripePaymentId?: String;
  status?: String;
  data?: Json;
}

export interface CartCreateManyWithoutItemsInput {
  create?: CartCreateWithoutItemsInput[] | CartCreateWithoutItemsInput;
  connect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
}

export interface UserUpdateOneWithoutPurchasesInput {
  create?: UserCreateWithoutPurchasesInput;
  update?: UserUpdateWithoutPurchasesDataInput;
  upsert?: UserUpsertWithoutPurchasesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface InvoiceCreateManyWithoutVendorsInput {
  create?:
    | InvoiceCreateWithoutVendorsInput[]
    | InvoiceCreateWithoutVendorsInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
}

export interface UserUpdateWithoutPurchasesDataInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneWithoutUserInput;
  stripeId?: String;
  products?: ProductUpdateManyWithoutVendorInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface UserCreateManyWithoutSalesInput {
  create?: UserCreateWithoutSalesInput[] | UserCreateWithoutSalesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProductUpdateManyWithoutVendorInput {
  create?: ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutVendorInput[]
    | ProductUpdateWithWhereUniqueWithoutVendorInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutVendorInput[]
    | ProductUpsertWithWhereUniqueWithoutVendorInput;
  deleteMany?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  updateMany?:
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ProductUpdateWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutVendorDataInput;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CartWhereInput;
  AND?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  OR?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  NOT?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
}

export interface ProductUpdateWithoutVendorDataInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  carts?: CartUpdateManyWithoutItemsInput;
  purchases?: InvoiceUpdateManyWithoutItemsInput;
}

export interface ProductUpdateManyMutationInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface CartUpdateManyWithoutItemsInput {
  create?: CartCreateWithoutItemsInput[] | CartCreateWithoutItemsInput;
  delete?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  connect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  disconnect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  update?:
    | CartUpdateWithWhereUniqueWithoutItemsInput[]
    | CartUpdateWithWhereUniqueWithoutItemsInput;
  upsert?:
    | CartUpsertWithWhereUniqueWithoutItemsInput[]
    | CartUpsertWithWhereUniqueWithoutItemsInput;
  deleteMany?: CartScalarWhereInput[] | CartScalarWhereInput;
  updateMany?:
    | CartUpdateManyWithWhereNestedInput[]
    | CartUpdateManyWithWhereNestedInput;
}

export interface PaymentRecordUpdateManyMutationInput {
  dateCreated?: DateTimeInput;
  amount?: Int;
  balanceTransaction?: String;
  created?: Int;
  currency?: String;
  stripeCustomerId?: String;
  stripePaymentId?: String;
  status?: String;
  data?: Json;
}

export interface CartUpdateWithWhereUniqueWithoutItemsInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutItemsDataInput;
}

export interface InvoiceUpdateInput {
  dateCreated?: DateTimeInput;
  items?: ProductUpdateManyWithoutPurchasesInput;
  amount?: String;
  email?: String;
  record?: Json;
  stripeRecord?: PaymentRecordUpdateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserUpdateOneWithoutPurchasesInput;
  vendors?: UserUpdateManyWithoutSalesInput;
}

export interface CartUpdateWithoutItemsDataInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  user?: UserUpdateOneRequiredWithoutCartInput;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface CartUpsertWithWhereUniqueWithoutItemsInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutItemsDataInput;
  create: CartCreateWithoutItemsInput;
}

export interface UserUpsertWithoutProductsInput {
  update: UserUpdateWithoutProductsDataInput;
  create: UserCreateWithoutProductsInput;
}

export interface CartScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  itemCount?: Int;
  itemCount_not?: Int;
  itemCount_in?: Int[] | Int;
  itemCount_not_in?: Int[] | Int;
  itemCount_lt?: Int;
  itemCount_lte?: Int;
  itemCount_gt?: Int;
  itemCount_gte?: Int;
  totalPrice?: String;
  totalPrice_not?: String;
  totalPrice_in?: String[] | String;
  totalPrice_not_in?: String[] | String;
  totalPrice_lt?: String;
  totalPrice_lte?: String;
  totalPrice_gt?: String;
  totalPrice_gte?: String;
  totalPrice_contains?: String;
  totalPrice_not_contains?: String;
  totalPrice_starts_with?: String;
  totalPrice_not_starts_with?: String;
  totalPrice_ends_with?: String;
  totalPrice_not_ends_with?: String;
  AND?: CartScalarWhereInput[] | CartScalarWhereInput;
  OR?: CartScalarWhereInput[] | CartScalarWhereInput;
  NOT?: CartScalarWhereInput[] | CartScalarWhereInput;
}

export interface UserCreateOneWithoutCartInput {
  create?: UserCreateWithoutCartInput;
  connect?: UserWhereUniqueInput;
}

export interface CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput;
  data: CartUpdateManyDataInput;
}

export interface InvoiceCreateWithoutCustomerInput {
  dateCreated?: DateTimeInput;
  items?: ProductCreateManyWithoutPurchasesInput;
  amount?: String;
  email: String;
  record?: Json;
  stripeRecord?: PaymentRecordCreateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  vendors?: UserCreateManyWithoutSalesInput;
}

export interface CartUpdateManyDataInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
}

export interface UserCreateWithoutProductsInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface ProductUpsertWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutVendorDataInput;
  create: ProductCreateWithoutVendorInput;
}

export interface ProductCreateWithoutCartsInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserCreateOneWithoutProductsInput;
  purchases?: InvoiceCreateManyWithoutItemsInput;
}

export interface ProductScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  price?: String;
  price_not?: String;
  price_in?: String[] | String;
  price_not_in?: String[] | String;
  price_lt?: String;
  price_lte?: String;
  price_gt?: String;
  price_gte?: String;
  price_contains?: String;
  price_not_contains?: String;
  price_starts_with?: String;
  price_not_starts_with?: String;
  price_ends_with?: String;
  price_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  varietal?: String;
  varietal_not?: String;
  varietal_in?: String[] | String;
  varietal_not_in?: String[] | String;
  varietal_lt?: String;
  varietal_lte?: String;
  varietal_gt?: String;
  varietal_gte?: String;
  varietal_contains?: String;
  varietal_not_contains?: String;
  varietal_starts_with?: String;
  varietal_not_starts_with?: String;
  varietal_ends_with?: String;
  varietal_not_ends_with?: String;
  AND?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  OR?: ProductScalarWhereInput[] | ProductScalarWhereInput;
  NOT?: ProductScalarWhereInput[] | ProductScalarWhereInput;
}

export interface PaymentRecordCreateInput {
  dateCreated: DateTimeInput;
  amount: Int;
  balanceTransaction: String;
  created: Int;
  currency: String;
  stripeCustomerId: String;
  stripePaymentId: String;
  status: String;
  data?: Json;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductCreateWithoutVendorInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  carts?: CartCreateManyWithoutItemsInput;
  purchases?: InvoiceCreateManyWithoutItemsInput;
}

export interface ProductUpdateManyDataInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface InvoiceCreateWithoutVendorsInput {
  dateCreated?: DateTimeInput;
  items?: ProductCreateManyWithoutPurchasesInput;
  amount?: String;
  email: String;
  record?: Json;
  stripeRecord?: PaymentRecordCreateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserCreateOneWithoutPurchasesInput;
}

export interface InvoiceUpdateManyWithoutVendorsInput {
  create?:
    | InvoiceCreateWithoutVendorsInput[]
    | InvoiceCreateWithoutVendorsInput;
  delete?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  disconnect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  update?:
    | InvoiceUpdateWithWhereUniqueWithoutVendorsInput[]
    | InvoiceUpdateWithWhereUniqueWithoutVendorsInput;
  upsert?:
    | InvoiceUpsertWithWhereUniqueWithoutVendorsInput[]
    | InvoiceUpsertWithWhereUniqueWithoutVendorsInput;
  deleteMany?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
  updateMany?:
    | InvoiceUpdateManyWithWhereNestedInput[]
    | InvoiceUpdateManyWithWhereNestedInput;
}

export interface PaymentRecordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PaymentRecordWhereInput;
  AND?:
    | PaymentRecordSubscriptionWhereInput[]
    | PaymentRecordSubscriptionWhereInput;
  OR?:
    | PaymentRecordSubscriptionWhereInput[]
    | PaymentRecordSubscriptionWhereInput;
  NOT?:
    | PaymentRecordSubscriptionWhereInput[]
    | PaymentRecordSubscriptionWhereInput;
}

export interface InvoiceUpdateWithWhereUniqueWithoutVendorsInput {
  where: InvoiceWhereUniqueInput;
  data: InvoiceUpdateWithoutVendorsDataInput;
}

export type InvoiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InvoiceUpdateWithoutVendorsDataInput {
  dateCreated?: DateTimeInput;
  items?: ProductUpdateManyWithoutPurchasesInput;
  amount?: String;
  email?: String;
  record?: Json;
  stripeRecord?: PaymentRecordUpdateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserUpdateOneWithoutPurchasesInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface InvoiceUpsertWithWhereUniqueWithoutVendorsInput {
  where: InvoiceWhereUniqueInput;
  update: InvoiceUpdateWithoutVendorsDataInput;
  create: InvoiceCreateWithoutVendorsInput;
}

export interface ProductCreateWithoutPurchasesInput {
  dateCreated?: DateTimeInput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserCreateOneWithoutProductsInput;
  carts?: CartCreateManyWithoutItemsInput;
}

export interface InvoiceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  amount?: String;
  amount_not?: String;
  amount_in?: String[] | String;
  amount_not_in?: String[] | String;
  amount_lt?: String;
  amount_lte?: String;
  amount_gt?: String;
  amount_gte?: String;
  amount_contains?: String;
  amount_not_contains?: String;
  amount_starts_with?: String;
  amount_not_starts_with?: String;
  amount_ends_with?: String;
  amount_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  created?: Int;
  created_not?: Int;
  created_in?: Int[] | Int;
  created_not_in?: Int[] | Int;
  created_lt?: Int;
  created_lte?: Int;
  created_gt?: Int;
  created_gte?: Int;
  stripePaymentId?: String;
  stripePaymentId_not?: String;
  stripePaymentId_in?: String[] | String;
  stripePaymentId_not_in?: String[] | String;
  stripePaymentId_lt?: String;
  stripePaymentId_lte?: String;
  stripePaymentId_gt?: String;
  stripePaymentId_gte?: String;
  stripePaymentId_contains?: String;
  stripePaymentId_not_contains?: String;
  stripePaymentId_starts_with?: String;
  stripePaymentId_not_starts_with?: String;
  stripePaymentId_ends_with?: String;
  stripePaymentId_not_ends_with?: String;
  stripeCustomerId?: String;
  stripeCustomerId_not?: String;
  stripeCustomerId_in?: String[] | String;
  stripeCustomerId_not_in?: String[] | String;
  stripeCustomerId_lt?: String;
  stripeCustomerId_lte?: String;
  stripeCustomerId_gt?: String;
  stripeCustomerId_gte?: String;
  stripeCustomerId_contains?: String;
  stripeCustomerId_not_contains?: String;
  stripeCustomerId_starts_with?: String;
  stripeCustomerId_not_starts_with?: String;
  stripeCustomerId_ends_with?: String;
  stripeCustomerId_not_ends_with?: String;
  AND?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
  OR?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
  NOT?: InvoiceScalarWhereInput[] | InvoiceScalarWhereInput;
}

export interface InvoiceCreateWithoutItemsInput {
  dateCreated?: DateTimeInput;
  amount?: String;
  email: String;
  record?: Json;
  stripeRecord?: PaymentRecordCreateManyInput;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
  customer?: UserCreateOneWithoutPurchasesInput;
  vendors?: UserCreateManyWithoutSalesInput;
}

export interface InvoiceUpdateManyWithWhereNestedInput {
  where: InvoiceScalarWhereInput;
  data: InvoiceUpdateManyDataInput;
}

export interface CartCreateWithoutItemsInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  user: UserCreateOneWithoutCartInput;
}

export interface InvoiceUpdateManyDataInput {
  dateCreated?: DateTimeInput;
  amount?: String;
  email?: String;
  record?: Json;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
}

export interface UserUpdateInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  products?: ProductUpdateManyWithoutVendorInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface UserUpsertWithoutPurchasesInput {
  update: UserUpdateWithoutPurchasesDataInput;
  create: UserCreateWithoutPurchasesInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  stripeId?: String;
}>;

export interface UserUpdateManyWithoutSalesInput {
  create?: UserCreateWithoutSalesInput[] | UserCreateWithoutSalesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSalesInput[]
    | UserUpdateWithWhereUniqueWithoutSalesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSalesInput[]
    | UserUpsertWithWhereUniqueWithoutSalesInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface CartCreateWithoutUserInput {
  dateCreated?: DateTimeInput;
  itemCount?: Int;
  totalPrice?: String;
  items?: ProductCreateManyWithoutCartsInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateCreated?: DateTimeInput;
  dateCreated_not?: DateTimeInput;
  dateCreated_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_not_in?: DateTimeInput[] | DateTimeInput;
  dateCreated_lt?: DateTimeInput;
  dateCreated_lte?: DateTimeInput;
  dateCreated_gt?: DateTimeInput;
  dateCreated_gte?: DateTimeInput;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  bizName?: String;
  bizName_not?: String;
  bizName_in?: String[] | String;
  bizName_not_in?: String[] | String;
  bizName_lt?: String;
  bizName_lte?: String;
  bizName_gt?: String;
  bizName_gte?: String;
  bizName_contains?: String;
  bizName_not_contains?: String;
  bizName_starts_with?: String;
  bizName_not_starts_with?: String;
  bizName_ends_with?: String;
  bizName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  stripeId?: String;
  stripeId_not?: String;
  stripeId_in?: String[] | String;
  stripeId_not_in?: String[] | String;
  stripeId_lt?: String;
  stripeId_lte?: String;
  stripeId_gt?: String;
  stripeId_gte?: String;
  stripeId_contains?: String;
  stripeId_not_contains?: String;
  stripeId_starts_with?: String;
  stripeId_not_starts_with?: String;
  stripeId_ends_with?: String;
  stripeId_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutSalesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSalesDataInput;
  create: UserCreateWithoutSalesInput;
}

export interface UserUpdateWithoutSalesDataInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  products?: ProductUpdateManyWithoutVendorInput;
}

export interface UserUpdateWithWhereUniqueWithoutSalesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSalesDataInput;
}

export interface UserCreateWithoutPurchasesInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneWithoutUserInput;
  stripeId?: String;
  products?: ProductCreateManyWithoutVendorInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface UserCreatepermissionsInput {
  set?: String[] | String;
}

export type PaymentRecordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutSalesInput {
  dateCreated?: DateTimeInput;
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneWithoutUserInput;
  stripeId?: String;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  products?: ProductCreateManyWithoutVendorInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  role?: String;
  permissions: String[];
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  role: () => Promise<String>;
  permissions: () => Promise<String[]>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  bizName: () => Promise<String>;
  password: () => Promise<String>;
  stripeId: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String[]>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  bizName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  stripeId: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  role?: String;
  permissions: String[];
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  stripeId?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  role: () => Promise<String>;
  permissions: () => Promise<String[]>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  bizName: () => Promise<String>;
  password: () => Promise<String>;
  cart: <T = CartPromise>() => T;
  stripeId: () => Promise<String>;
  purchases: <T = FragmentableArray<Invoice>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sales: <T = FragmentableArray<Invoice>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String[]>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  bizName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  cart: <T = CartSubscription>() => T;
  stripeId: () => Promise<AsyncIterator<String>>;
  purchases: <T = Promise<AsyncIterator<InvoiceSubscription>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sales: <T = Promise<AsyncIterator<InvoiceSubscription>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Product {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  price: () => Promise<String>;
  description: () => Promise<String>;
  varietal: () => Promise<String>;
  vendor: <T = UserPromise>() => T;
  carts: <T = FragmentableArray<Cart>>(
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  purchases: <T = FragmentableArray<Invoice>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  varietal: () => Promise<AsyncIterator<String>>;
  vendor: <T = UserSubscription>() => T;
  carts: <T = Promise<AsyncIterator<CartSubscription>>>(
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  purchases: <T = Promise<AsyncIterator<InvoiceSubscription>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentRecordPreviousValues {
  id: ID_Output;
  dateCreated: DateTimeOutput;
  amount: Int;
  balanceTransaction: String;
  created: Int;
  currency: String;
  stripeCustomerId: String;
  stripePaymentId: String;
  status: String;
  data?: Json;
}

export interface PaymentRecordPreviousValuesPromise
  extends Promise<PaymentRecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
  balanceTransaction: () => Promise<String>;
  created: () => Promise<Int>;
  currency: () => Promise<String>;
  stripeCustomerId: () => Promise<String>;
  stripePaymentId: () => Promise<String>;
  status: () => Promise<String>;
  data: () => Promise<Json>;
}

export interface PaymentRecordPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentRecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
  balanceTransaction: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<String>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripePaymentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface CartEdge {
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Invoice {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  amount?: String;
  email: String;
  record?: Json;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
}

export interface InvoicePromise extends Promise<Invoice>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  items: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  amount: () => Promise<String>;
  email: () => Promise<String>;
  record: () => Promise<Json>;
  stripeRecord: <T = FragmentableArray<PaymentRecord>>(
    args?: {
      where?: PaymentRecordWhereInput;
      orderBy?: PaymentRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  created: () => Promise<Int>;
  stripePaymentId: () => Promise<String>;
  stripeCustomerId: () => Promise<String>;
  customer: <T = UserPromise>() => T;
  vendors: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface InvoiceSubscription
  extends Promise<AsyncIterator<Invoice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  items: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  amount: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  record: () => Promise<AsyncIterator<Json>>;
  stripeRecord: <T = Promise<AsyncIterator<PaymentRecordSubscription>>>(
    args?: {
      where?: PaymentRecordWhereInput;
      orderBy?: PaymentRecordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  created: () => Promise<AsyncIterator<Int>>;
  stripePaymentId: () => Promise<AsyncIterator<String>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  customer: <T = UserSubscription>() => T;
  vendors: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductEdge {
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CartConnection {}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductPreviousValues {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  price: () => Promise<String>;
  description: () => Promise<String>;
  varietal: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  varietal: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePaymentRecord {
  count: Int;
}

export interface AggregatePaymentRecordPromise
  extends Promise<AggregatePaymentRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentRecordSubscription
  extends Promise<AsyncIterator<AggregatePaymentRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cart {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  itemCount?: Int;
  totalPrice?: String;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  itemCount: () => Promise<Int>;
  totalPrice: () => Promise<String>;
  user: <T = UserPromise>() => T;
  items: <T = FragmentableArray<Product>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemCount: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  items: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PaymentRecordConnection {}

export interface PaymentRecordConnectionPromise
  extends Promise<PaymentRecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentRecordEdge>>() => T;
  aggregate: <T = AggregatePaymentRecordPromise>() => T;
}

export interface PaymentRecordConnectionSubscription
  extends Promise<AsyncIterator<PaymentRecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentRecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentRecordSubscription>() => T;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface InvoiceEdge {
  cursor: String;
}

export interface InvoiceEdgePromise extends Promise<InvoiceEdge>, Fragmentable {
  node: <T = InvoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvoiceEdgeSubscription
  extends Promise<AsyncIterator<InvoiceEdge>>,
    Fragmentable {
  node: <T = InvoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CartPreviousValues {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  itemCount?: Int;
  totalPrice?: String;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  itemCount: () => Promise<Int>;
  totalPrice: () => Promise<String>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  itemCount: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PaymentRecord {
  id: ID_Output;
  dateCreated: DateTimeOutput;
  amount: Int;
  balanceTransaction: String;
  created: Int;
  currency: String;
  stripeCustomerId: String;
  stripePaymentId: String;
  status: String;
  data?: Json;
}

export interface PaymentRecordPromise
  extends Promise<PaymentRecord>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  amount: () => Promise<Int>;
  balanceTransaction: () => Promise<String>;
  created: () => Promise<Int>;
  currency: () => Promise<String>;
  stripeCustomerId: () => Promise<String>;
  stripePaymentId: () => Promise<String>;
  status: () => Promise<String>;
  data: () => Promise<Json>;
}

export interface PaymentRecordSubscription
  extends Promise<AsyncIterator<PaymentRecord>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Int>>;
  balanceTransaction: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<String>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripePaymentId: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface ProductConnection {}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface PaymentRecordEdge {
  cursor: String;
}

export interface PaymentRecordEdgePromise
  extends Promise<PaymentRecordEdge>,
    Fragmentable {
  node: <T = PaymentRecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentRecordEdgeSubscription
  extends Promise<AsyncIterator<PaymentRecordEdge>>,
    Fragmentable {
  node: <T = PaymentRecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PaymentRecordSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PaymentRecordSubscriptionPayloadPromise
  extends Promise<PaymentRecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentRecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentRecordPreviousValuesPromise>() => T;
}

export interface PaymentRecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentRecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentRecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentRecordPreviousValuesSubscription>() => T;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface InvoicePreviousValues {
  id: ID_Output;
  dateCreated?: DateTimeOutput;
  amount?: String;
  email: String;
  record?: Json;
  created?: Int;
  stripePaymentId?: String;
  stripeCustomerId?: String;
}

export interface InvoicePreviousValuesPromise
  extends Promise<InvoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateCreated: () => Promise<DateTimeOutput>;
  amount: () => Promise<String>;
  email: () => Promise<String>;
  record: () => Promise<Json>;
  created: () => Promise<Int>;
  stripePaymentId: () => Promise<String>;
  stripeCustomerId: () => Promise<String>;
}

export interface InvoicePreviousValuesSubscription
  extends Promise<AsyncIterator<InvoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateCreated: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  record: () => Promise<AsyncIterator<Json>>;
  created: () => Promise<AsyncIterator<Int>>;
  stripePaymentId: () => Promise<AsyncIterator<String>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
}

export interface InvoiceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface InvoiceSubscriptionPayloadPromise
  extends Promise<InvoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvoicePreviousValuesPromise>() => T;
}

export interface InvoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvoicePreviousValuesSubscription>() => T;
}

export interface AggregateInvoice {
  count: Int;
}

export interface AggregateInvoicePromise
  extends Promise<AggregateInvoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvoiceSubscription
  extends Promise<AsyncIterator<AggregateInvoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InvoiceConnection {}

export interface InvoiceConnectionPromise
  extends Promise<InvoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvoiceEdge>>() => T;
  aggregate: <T = AggregateInvoicePromise>() => T;
}

export interface InvoiceConnectionSubscription
  extends Promise<AsyncIterator<InvoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvoiceSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Json = any;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "Invoice",
    embedded: false
  },
  {
    name: "PaymentRecord",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
