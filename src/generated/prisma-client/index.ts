// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  cart: (where?: CartWhereInput) => Promise<boolean>;
  invoice: (where?: InvoiceWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  cart: (where: CartWhereUniqueInput) => Cart;
  carts: (
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CartNode>>;
  cartsConnection: (
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CartConnection;
  invoice: (where: InvoiceWhereUniqueInput) => Invoice;
  invoices: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<InvoiceNode>>;
  invoicesConnection: (
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InvoiceConnection;
  product: (where: ProductWhereUniqueInput) => Product;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ProductNode>>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCart: (data: CartCreateInput) => Cart;
  updateCart: (
    args: { data: CartUpdateInput; where: CartWhereUniqueInput }
  ) => Cart;
  updateManyCarts: (
    args: { data: CartUpdateInput; where?: CartWhereInput }
  ) => BatchPayload;
  upsertCart: (
    args: {
      where: CartWhereUniqueInput;
      create: CartCreateInput;
      update: CartUpdateInput;
    }
  ) => Cart;
  deleteCart: (where: CartWhereUniqueInput) => Cart;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayload;
  createInvoice: (data: InvoiceCreateInput) => Invoice;
  updateInvoice: (
    args: { data: InvoiceUpdateInput; where: InvoiceWhereUniqueInput }
  ) => Invoice;
  updateManyInvoices: (
    args: { data: InvoiceUpdateInput; where?: InvoiceWhereInput }
  ) => BatchPayload;
  upsertInvoice: (
    args: {
      where: InvoiceWhereUniqueInput;
      create: InvoiceCreateInput;
      update: InvoiceUpdateInput;
    }
  ) => Invoice;
  deleteInvoice: (where: InvoiceWhereUniqueInput) => Invoice;
  deleteManyInvoices: (where?: InvoiceWhereInput) => BatchPayload;
  createProduct: (data: ProductCreateInput) => Product;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => Product;
  updateManyProducts: (
    args: { data: ProductUpdateInput; where?: ProductWhereInput }
  ) => BatchPayload;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => Product;
  deleteProduct: (where: ProductWhereUniqueInput) => Product;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  invoice: (
    where?: InvoiceSubscriptionWhereInput
  ) => InvoiceSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "description_ASC"
  | "description_DESC"
  | "varietal_ASC"
  | "varietal_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InvoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "role_ASC"
  | "role_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "bizName_ASC"
  | "bizName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "itemCount_ASC"
  | "itemCount_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProductUpdateWithWhereUniqueWithoutCartsInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCartsDataInput;
}

export type CartWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutProductsDataInput {
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneInput;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface CartWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  itemCount?: Int;
  itemCount_not?: Int;
  itemCount_in?: Int[] | Int;
  itemCount_not_in?: Int[] | Int;
  itemCount_lt?: Int;
  itemCount_lte?: Int;
  itemCount_gt?: Int;
  itemCount_gte?: Int;
  totalPrice?: String;
  totalPrice_not?: String;
  totalPrice_in?: String[] | String;
  totalPrice_not_in?: String[] | String;
  totalPrice_lt?: String;
  totalPrice_lte?: String;
  totalPrice_gt?: String;
  totalPrice_gte?: String;
  totalPrice_contains?: String;
  totalPrice_not_contains?: String;
  totalPrice_starts_with?: String;
  totalPrice_not_starts_with?: String;
  totalPrice_ends_with?: String;
  totalPrice_not_ends_with?: String;
  items_every?: ProductWhereInput;
  items_some?: ProductWhereInput;
  items_none?: ProductWhereInput;
  AND?: CartWhereInput[] | CartWhereInput;
  OR?: CartWhereInput[] | CartWhereInput;
  NOT?: CartWhereInput[] | CartWhereInput;
}

export interface UserUpdatepermissionsInput {
  set?: String[] | String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  bizName?: String;
  bizName_not?: String;
  bizName_in?: String[] | String;
  bizName_not_in?: String[] | String;
  bizName_lt?: String;
  bizName_lte?: String;
  bizName_gt?: String;
  bizName_gte?: String;
  bizName_contains?: String;
  bizName_not_contains?: String;
  bizName_starts_with?: String;
  bizName_not_starts_with?: String;
  bizName_ends_with?: String;
  bizName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  cart?: CartWhereInput;
  purchases_every?: InvoiceWhereInput;
  purchases_some?: InvoiceWhereInput;
  purchases_none?: InvoiceWhereInput;
  products_every?: ProductWhereInput;
  products_some?: ProductWhereInput;
  products_none?: ProductWhereInput;
  sales_every?: InvoiceWhereInput;
  sales_some?: InvoiceWhereInput;
  sales_none?: InvoiceWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateWithoutSalesInput {
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneInput;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  products?: ProductCreateManyWithoutVendorInput;
}

export interface UserUpsertWithWhereUniqueWithoutSalesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSalesDataInput;
  create: UserCreateWithoutSalesInput;
}

export interface ProductCreateManyWithoutVendorInput {
  create?: ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface CartUpdateOneInput {
  create?: CartCreateInput;
  update?: CartUpdateDataInput;
  upsert?: CartUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CartWhereUniqueInput;
}

export interface ProductCreateWithoutVendorInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  carts?: CartCreateManyWithoutItemsInput;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export interface InvoiceCreateManyWithoutVendorsInput {
  create?:
    | InvoiceCreateWithoutVendorsInput[]
    | InvoiceCreateWithoutVendorsInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CartWhereInput;
  AND?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  OR?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
  NOT?: CartSubscriptionWhereInput[] | CartSubscriptionWhereInput;
}

export interface InvoiceCreateWithoutVendorsInput {
  items?: ProductCreateManyInput;
  amount?: String;
  email: String;
  customer?: UserCreateOneWithoutPurchasesInput;
}

export interface UserCreateInput {
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneInput;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  products?: ProductCreateManyWithoutVendorInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface UserCreateOneWithoutPurchasesInput {
  create?: UserCreateWithoutPurchasesInput;
  connect?: UserWhereUniqueInput;
}

export interface InvoiceUpdateInput {
  items?: ProductUpdateManyInput;
  amount?: String;
  email?: String;
  customer?: UserUpdateOneWithoutPurchasesInput;
  vendors?: UserUpdateManyWithoutSalesInput;
}

export interface UserCreateWithoutPurchasesInput {
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneInput;
  products?: ProductCreateManyWithoutVendorInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface InvoiceCreateInput {
  items?: ProductCreateManyInput;
  amount?: String;
  email: String;
  customer?: UserCreateOneWithoutPurchasesInput;
  vendors?: UserCreateManyWithoutSalesInput;
}

export interface CartUpdateInput {
  itemCount?: Int;
  totalPrice?: String;
  items?: ProductUpdateManyWithoutCartsInput;
}

export interface UserUpsertWithoutProductsInput {
  update: UserUpdateWithoutProductsDataInput;
  create: UserCreateWithoutProductsInput;
}

export interface ProductUpdateManyWithoutCartsInput {
  create?: ProductCreateWithoutCartsInput[] | ProductCreateWithoutCartsInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutCartsInput[]
    | ProductUpdateWithWhereUniqueWithoutCartsInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutCartsInput[]
    | ProductUpsertWithWhereUniqueWithoutCartsInput;
}

export interface InvoiceUpsertWithWhereUniqueWithoutVendorsInput {
  where: InvoiceWhereUniqueInput;
  update: InvoiceUpdateWithoutVendorsDataInput;
  create: InvoiceCreateWithoutVendorsInput;
}

export interface InvoiceUpdateManyWithoutVendorsInput {
  create?:
    | InvoiceCreateWithoutVendorsInput[]
    | InvoiceCreateWithoutVendorsInput;
  delete?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  disconnect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  update?:
    | InvoiceUpdateWithWhereUniqueWithoutVendorsInput[]
    | InvoiceUpdateWithWhereUniqueWithoutVendorsInput;
  upsert?:
    | InvoiceUpsertWithWhereUniqueWithoutVendorsInput[]
    | InvoiceUpsertWithWhereUniqueWithoutVendorsInput;
}

export interface UserUpdateWithoutPurchasesDataInput {
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneInput;
  products?: ProductUpdateManyWithoutVendorInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface ProductUpdateWithoutCartsDataInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
}

export interface UserUpdateOneWithoutPurchasesInput {
  create?: UserCreateWithoutPurchasesInput;
  update?: UserUpdateWithoutPurchasesDataInput;
  upsert?: UserUpsertWithoutPurchasesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneWithoutProductsInput {
  create?: UserCreateWithoutProductsInput;
  update?: UserUpdateWithoutProductsDataInput;
  upsert?: UserUpsertWithoutProductsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface InvoiceUpdateWithWhereUniqueWithoutVendorsInput {
  where: InvoiceWhereUniqueInput;
  data: InvoiceUpdateWithoutVendorsDataInput;
}

export interface InvoiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  items_every?: ProductWhereInput;
  items_some?: ProductWhereInput;
  items_none?: ProductWhereInput;
  amount?: String;
  amount_not?: String;
  amount_in?: String[] | String;
  amount_not_in?: String[] | String;
  amount_lt?: String;
  amount_lte?: String;
  amount_gt?: String;
  amount_gte?: String;
  amount_contains?: String;
  amount_not_contains?: String;
  amount_starts_with?: String;
  amount_not_starts_with?: String;
  amount_ends_with?: String;
  amount_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  customer?: UserWhereInput;
  vendors_every?: UserWhereInput;
  vendors_some?: UserWhereInput;
  vendors_none?: UserWhereInput;
  AND?: InvoiceWhereInput[] | InvoiceWhereInput;
  OR?: InvoiceWhereInput[] | InvoiceWhereInput;
  NOT?: InvoiceWhereInput[] | InvoiceWhereInput;
}

export interface CartCreateInput {
  itemCount?: Int;
  totalPrice?: String;
  items?: ProductCreateManyWithoutCartsInput;
}

export interface InvoiceUpsertWithWhereUniqueWithoutCustomerInput {
  where: InvoiceWhereUniqueInput;
  update: InvoiceUpdateWithoutCustomerDataInput;
  create: InvoiceCreateWithoutCustomerInput;
}

export interface ProductCreateWithoutCartsInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserCreateOneWithoutProductsInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  price?: String;
  price_not?: String;
  price_in?: String[] | String;
  price_not_in?: String[] | String;
  price_lt?: String;
  price_lte?: String;
  price_gt?: String;
  price_gte?: String;
  price_contains?: String;
  price_not_contains?: String;
  price_starts_with?: String;
  price_not_starts_with?: String;
  price_ends_with?: String;
  price_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  varietal?: String;
  varietal_not?: String;
  varietal_in?: String[] | String;
  varietal_not_in?: String[] | String;
  varietal_lt?: String;
  varietal_lte?: String;
  varietal_gt?: String;
  varietal_gte?: String;
  varietal_contains?: String;
  varietal_not_contains?: String;
  varietal_starts_with?: String;
  varietal_not_starts_with?: String;
  varietal_ends_with?: String;
  varietal_not_ends_with?: String;
  vendor?: UserWhereInput;
  carts_every?: CartWhereInput;
  carts_some?: CartWhereInput;
  carts_none?: CartWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface UserCreateWithoutProductsInput {
  role?: String;
  permissions?: UserCreatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartCreateOneInput;
  purchases?: InvoiceCreateManyWithoutCustomerInput;
  sales?: InvoiceCreateManyWithoutVendorsInput;
}

export interface CartUpdateDataInput {
  itemCount?: Int;
  totalPrice?: String;
  items?: ProductUpdateManyWithoutCartsInput;
}

export interface CartCreateOneInput {
  create?: CartCreateInput;
  connect?: CartWhereUniqueInput;
}

export interface CartUpsertNestedInput {
  update: CartUpdateDataInput;
  create: CartCreateInput;
}

export interface InvoiceCreateWithoutCustomerInput {
  items?: ProductCreateManyInput;
  amount?: String;
  email: String;
  vendors?: UserCreateManyWithoutSalesInput;
}

export interface InvoiceUpdateManyWithoutCustomerInput {
  create?:
    | InvoiceCreateWithoutCustomerInput[]
    | InvoiceCreateWithoutCustomerInput;
  delete?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  disconnect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
  update?:
    | InvoiceUpdateWithWhereUniqueWithoutCustomerInput[]
    | InvoiceUpdateWithWhereUniqueWithoutCustomerInput;
  upsert?:
    | InvoiceUpsertWithWhereUniqueWithoutCustomerInput[]
    | InvoiceUpsertWithWhereUniqueWithoutCustomerInput;
}

export interface ProductCreateInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserCreateOneWithoutProductsInput;
  carts?: CartCreateManyWithoutItemsInput;
}

export interface InvoiceUpdateWithWhereUniqueWithoutCustomerInput {
  where: InvoiceWhereUniqueInput;
  data: InvoiceUpdateWithoutCustomerDataInput;
}

export interface CartCreateWithoutItemsInput {
  itemCount?: Int;
  totalPrice?: String;
}

export interface InvoiceUpdateWithoutCustomerDataInput {
  items?: ProductUpdateManyInput;
  amount?: String;
  email?: String;
  vendors?: UserUpdateManyWithoutSalesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ProductUpdateManyInput {
  create?: ProductCreateInput[] | ProductCreateInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueNestedInput[]
    | ProductUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProductUpsertWithWhereUniqueNestedInput[]
    | ProductUpsertWithWhereUniqueNestedInput;
}

export interface UserUpdateInput {
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneInput;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  products?: ProductUpdateManyWithoutVendorInput;
  sales?: InvoiceUpdateManyWithoutVendorsInput;
}

export interface ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateDataInput;
}

export type InvoiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductUpdateDataInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
  carts?: CartUpdateManyWithoutItemsInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CartUpdateManyWithoutItemsInput {
  create?: CartCreateWithoutItemsInput[] | CartCreateWithoutItemsInput;
  delete?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  connect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  disconnect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
  update?:
    | CartUpdateWithWhereUniqueWithoutItemsInput[]
    | CartUpdateWithWhereUniqueWithoutItemsInput;
  upsert?:
    | CartUpsertWithWhereUniqueWithoutItemsInput[]
    | CartUpsertWithWhereUniqueWithoutItemsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CartUpdateWithWhereUniqueWithoutItemsInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutItemsDataInput;
}

export interface UserCreateOneWithoutProductsInput {
  create?: UserCreateWithoutProductsInput;
  connect?: UserWhereUniqueInput;
}

export interface CartUpdateWithoutItemsDataInput {
  itemCount?: Int;
  totalPrice?: String;
}

export interface InvoiceCreateManyWithoutCustomerInput {
  create?:
    | InvoiceCreateWithoutCustomerInput[]
    | InvoiceCreateWithoutCustomerInput;
  connect?: InvoiceWhereUniqueInput[] | InvoiceWhereUniqueInput;
}

export interface CartUpsertWithWhereUniqueWithoutItemsInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutItemsDataInput;
  create: CartCreateWithoutItemsInput;
}

export interface CartCreateManyWithoutItemsInput {
  create?: CartCreateWithoutItemsInput[] | CartCreateWithoutItemsInput;
  connect?: CartWhereUniqueInput[] | CartWhereUniqueInput;
}

export interface ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface InvoiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InvoiceWhereInput;
  AND?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  OR?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
  NOT?: InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput;
}

export interface UserUpdateManyWithoutSalesInput {
  create?: UserCreateWithoutSalesInput[] | UserCreateWithoutSalesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSalesInput[]
    | UserUpdateWithWhereUniqueWithoutSalesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSalesInput[]
    | UserUpsertWithWhereUniqueWithoutSalesInput;
}

export interface ProductUpsertWithWhereUniqueWithoutCartsInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCartsDataInput;
  create: ProductCreateWithoutCartsInput;
}

export interface UserUpdateWithWhereUniqueWithoutSalesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSalesDataInput;
}

export interface InvoiceUpdateWithoutVendorsDataInput {
  items?: ProductUpdateManyInput;
  amount?: String;
  email?: String;
  customer?: UserUpdateOneWithoutPurchasesInput;
}

export interface UserUpdateWithoutSalesDataInput {
  role?: String;
  permissions?: UserUpdatepermissionsInput;
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
  cart?: CartUpdateOneInput;
  purchases?: InvoiceUpdateManyWithoutCustomerInput;
  products?: ProductUpdateManyWithoutVendorInput;
}

export interface UserCreatepermissionsInput {
  set?: String[] | String;
}

export interface ProductUpsertWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutVendorDataInput;
  create: ProductCreateWithoutVendorInput;
}

export interface ProductUpdateWithoutVendorDataInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  carts?: CartUpdateManyWithoutItemsInput;
}

export interface ProductUpdateWithWhereUniqueWithoutVendorInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutVendorDataInput;
}

export interface ProductUpdateManyWithoutVendorInput {
  create?: ProductCreateWithoutVendorInput[] | ProductCreateWithoutVendorInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutVendorInput[]
    | ProductUpdateWithWhereUniqueWithoutVendorInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutVendorInput[]
    | ProductUpsertWithWhereUniqueWithoutVendorInput;
}

export interface ProductCreateManyInput {
  create?: ProductCreateInput[] | ProductCreateInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface ProductCreateManyWithoutCartsInput {
  create?: ProductCreateWithoutCartsInput[] | ProductCreateWithoutCartsInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface UserUpsertWithoutPurchasesInput {
  update: UserUpdateWithoutPurchasesDataInput;
  create: UserCreateWithoutPurchasesInput;
}

export interface ProductUpdateInput {
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
  vendor?: UserUpdateOneWithoutProductsInput;
  carts?: CartUpdateManyWithoutItemsInput;
}

export interface UserCreateManyWithoutSalesInput {
  create?: UserCreateWithoutSalesInput[] | UserCreateWithoutSalesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  role?: String;
  permissions: String[];
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  role: () => Promise<String>;
  permissions: () => Promise<String[]>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  bizName: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String[]>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  bizName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  cart: any;
  id: ID_Output;
  role?: String;
  permissions: String[];
  email?: String;
  firstName?: String;
  lastName?: String;
  bizName?: String;
  password?: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  role: () => Promise<String>;
  permissions: () => Promise<String[]>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  bizName: () => Promise<String>;
  password: () => Promise<String>;
  cart: <T = Cart>() => T;
  purchases: <T = Promise<Array<InvoiceNode>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = Promise<Array<ProductNode>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sales: <T = Promise<Array<InvoiceNode>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<String[]>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  bizName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  cart: <T = CartSubscription>() => T;
  purchases: <T = Promise<AsyncIterator<Array<InvoiceSubscription>>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = Promise<AsyncIterator<Array<ProductSubscription>>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sales: <T = Promise<AsyncIterator<Array<InvoiceSubscription>>>>(
    args?: {
      where?: InvoiceWhereInput;
      orderBy?: InvoiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductNode {
  id: ID_Output;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface Product extends Promise<ProductNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<String>;
  description: () => Promise<String>;
  varietal: () => Promise<String>;
  vendor: <T = User>() => T;
  carts: <T = Promise<Array<CartNode>>>(
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<ProductNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  varietal: () => Promise<AsyncIterator<String>>;
  vendor: <T = UserSubscription>() => T;
  carts: <T = Promise<AsyncIterator<Array<CartSubscription>>>>(
    args?: {
      where?: CartWhereInput;
      orderBy?: CartOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartConnectionNode {}

export interface CartConnection
  extends Promise<CartConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CartEdgeNode>>>() => T;
  aggregate: <T = AggregateCart>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CartEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CartNode {
  id: ID_Output;
  itemCount?: Int;
  totalPrice?: String;
}

export interface Cart extends Promise<CartNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  itemCount: () => Promise<Int>;
  totalPrice: () => Promise<String>;
  items: <T = Promise<Array<ProductNode>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CartSubscription
  extends Promise<AsyncIterator<CartNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  itemCount: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<Array<ProductSubscription>>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductEdgeNode {
  cursor: String;
}

export interface ProductEdge extends Promise<ProductEdgeNode>, Fragmentable {
  node: <T = Product>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdgeNode>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CartSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CartSubscriptionPayload
  extends Promise<CartSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Cart>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValues>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface AggregateInvoiceNode {
  count: Int;
}

export interface AggregateInvoice
  extends Promise<AggregateInvoiceNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvoiceSubscription
  extends Promise<AsyncIterator<AggregateInvoiceNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartPreviousValuesNode {
  id: ID_Output;
  itemCount?: Int;
  totalPrice?: String;
}

export interface CartPreviousValues
  extends Promise<CartPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  itemCount: () => Promise<Int>;
  totalPrice: () => Promise<String>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  itemCount: () => Promise<AsyncIterator<Int>>;
  totalPrice: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface InvoiceEdgeNode {
  cursor: String;
}

export interface InvoiceEdge extends Promise<InvoiceEdgeNode>, Fragmentable {
  node: <T = Invoice>() => T;
  cursor: () => Promise<String>;
}

export interface InvoiceEdgeSubscription
  extends Promise<AsyncIterator<InvoiceEdgeNode>>,
    Fragmentable {
  node: <T = InvoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProductSubscriptionPayload
  extends Promise<ProductSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Product>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValues>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface InvoiceNode {
  id: ID_Output;
  amount?: String;
  email: String;
}

export interface Invoice extends Promise<InvoiceNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = Promise<Array<ProductNode>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  amount: () => Promise<String>;
  email: () => Promise<String>;
  customer: <T = User>() => T;
  vendors: <T = Promise<Array<UserNode>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface InvoiceSubscription
  extends Promise<AsyncIterator<InvoiceNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  items: <T = Promise<AsyncIterator<Array<ProductSubscription>>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  amount: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  customer: <T = UserSubscription>() => T;
  vendors: <T = Promise<AsyncIterator<Array<UserSubscription>>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface InvoiceConnectionNode {}

export interface InvoiceConnection
  extends Promise<InvoiceConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<InvoiceEdgeNode>>>() => T;
  aggregate: <T = AggregateInvoice>() => T;
}

export interface InvoiceConnectionSubscription
  extends Promise<AsyncIterator<InvoiceConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<InvoiceEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateInvoiceSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValuesNode {
  id: ID_Output;
  name?: String;
  price?: String;
  description?: String;
  varietal?: String;
}

export interface ProductPreviousValues
  extends Promise<ProductPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<String>;
  description: () => Promise<String>;
  varietal: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  varietal: () => Promise<AsyncIterator<String>>;
}

export interface InvoicePreviousValuesNode {
  id: ID_Output;
  amount?: String;
  email: String;
}

export interface InvoicePreviousValues
  extends Promise<InvoicePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<String>;
  email: () => Promise<String>;
}

export interface InvoicePreviousValuesSubscription
  extends Promise<AsyncIterator<InvoicePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface InvoiceSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface InvoiceSubscriptionPayload
  extends Promise<InvoiceSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Invoice>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvoicePreviousValues>() => T;
}

export interface InvoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvoiceSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvoicePreviousValuesSubscription>() => T;
}

export interface AggregateCartNode {
  count: Int;
}

export interface AggregateCart
  extends Promise<AggregateCartNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCartNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CartEdgeNode {
  cursor: String;
}

export interface CartEdge extends Promise<CartEdgeNode>, Fragmentable {
  node: <T = Cart>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdgeNode>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnectionNode {}

export interface ProductConnection
  extends Promise<ProductConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ProductEdgeNode>>>() => T;
  aggregate: <T = AggregateProduct>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ProductEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface AggregateProductNode {
  count: Int;
}

export interface AggregateProduct
  extends Promise<AggregateProductNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProductNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`,
} as any);
export const prisma = new Prisma();
